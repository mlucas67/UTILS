$catalog UUID global
class UUID

    **
    * The most significant 64 bits of this UUID
    *
    * @serial
    **
    private mostSigBits
    
    **
    * The least significant 64 bits of this UUID
    *
    * @serial
    **
    private leastSigBits
    
    **
    * The version number associated with this UUID.  Computed on demand.
    **
    private version
    
    **
    * The variant number associated with this UUID.  Computed on demand.
    **
    private variant
    
    **
    * The timestamp associated with this UUID.  Computed on demand.
    **
    private timestamp
    
    **
    * The clock sequence associated with this UUID.  Computed on demand.
    **
    private sequence
    
    **
    * The node number associated with this UUID.  Computed on demand.
    **
    private node
    
    **
    * The hashcode of this UUID.  Computed on demand.
    **
    private hashCode
    
    **
    * Constructs a new <tt>UUID</tt> using the specific data.
    * <tt>mostSig</tt> is used for the most significant 64 bits
    * of the <tt>UUID</tt> and <tt>leastSig</tt> becomes the 
    * least significant 64 bits of the <tt>UUID</tt>.
    *
    * @param mostSig
    * @param leastSig
    **
    public sub create.object(mostSig=0, leastSig=0) var.args
        mostSigBits = mostSig
        leastSigBits = leastSig
        randomize system(1035) + system(1020)
    end
    
    public sub fromBytes(bytes)
        msb1 = 0
        msb2 = 0
        lsb1 = 0
        lsb2 = 0
        for i = 1 to 4
            msb1 = msb1 * 256 + seq(bytes[i, 1])
        next i
        for i = 5 to 8
            msb2 = msb2 * 256 + seq(bytes[i, 1])
        next i
        for i = 9 to 12
            lsb1 = lsb1 * 256 + seq(bytes[i, 1])
        next i
        for i = 13 to 16
            lsb2 = lsb2 * 256 + seq(bytes[i, 1])
        next i
        mostSigBits = msb1 : @fm : msb2
        leastSigBits = lsb1 : @fm : lsb2
    end
    
    **
    * Static factory to retrieve a type 4 (pseudo randomly generated) UUID.
    *
    * The <code>UUID</code> is generated using a cryptographically strong
    * pseudo random number generator.
    *
    * @return  a randomly generated <tt>UUID</tt>.
    **
    public function randomUUID()
        randomBytes = ''
        for i = 0 to 15
            begin case
                case (i = 6)
                    byte = rnd(256)
                    byte = bitand(byte, 0x0f) ;* clear version
                    byte = bitor(byte, 0x40)  ;* set to version 4
                    randomBytes := char(byte)
                case (i = 8)
                    byte = rnd(256)
                    byte = bitand(byte, 0x3f) ;* clear variant
                    byte = bitor(byte, 0x80)  ;* set to IETF variant
                    randomBytes := char(byte)
                case 1
                    randomBytes := char(rnd(256))
            end case
        next i
        me->fromBytes(randomBytes)
        return me
    end
    
    **
    * Static factory to retrieve a type 3 (name based) <tt>UUID</tt> based on
    * the specified byte array.
    *
    * @param  name a byte array to be used to construct a <tt>UUID</tt>.
    * @return  a <tt>UUID</tt> generated from the specified array.
    **
    public function nameUUIDFromBytes(name)
        md5Bytes = md5(name)
        byte = seq(md5Bytes[7,1])
        byte = bitand(byte, 0x0f) ;* clear version
        byte = bitor(byte, 0x30)  ;* set to version 3
        md5Bytes[7,1] = char(byte)
        byte = seq(md5Bytes[9,1])
        byte = bitand(byte, 0x3f) ;* clear variant
        byte = bitor(byte, 0x80)  ;* set to IETF variant
        md5Bytes[9,1] = char(byte)
        me->fromBytes(md5Bytes)
    end

    **
    * Creates a <tt>UUID</tt> from the string standard representation as
    * described in the {@link #toString} method.
    *
    * @param  name a string that specifies a <tt>UUID</tt>.
    * @return  a <tt>UUID</tt> with the specified value.
    * @throws IllegalArgumentException if name does not conform to the
    *         string representation as described in {@link #toString}.
    **
    public function fromString(name)
        components = convert('-', @fm, name)
        if (dcount(components, @fm) # 5) then
            throw "IllegalArgumentException", "Invalid UUID string: ":name
        end
        msb1 = oconv(components<1>, "mcxd")
        msb2 = oconv(components<2>:components<3>, "mcxd")
        lsb1 = oconv(components<3>:components<4>[1,4], "mcxd")
        lsb2 = oconv(components<4>[5,8], "mcxd")
        mostSigBits = msb1 : @fm : msb2
        leastSigBits = lsb1 : @fm : lsb2
        return me
    end
    
    **
    * Returns the least significant 64 bits of this UUID's 128 bit value.
    *
    * @return the least significant 64 bits of this UUID's 128 bit value.
    **
    public function getLeastSignificantBits()
        return leastSigBits
    end

    **
    * Returns the most significant 64 bits of this UUID's 128 bit value.
    *
    * @return the most significant 64 bits of this UUID's 128 bit value.
    **
    public function getMostSignificantBits()
        return mostSigBits
    end

    **
    * The version number associated with this <tt>UUID</tt>. The version 
    * number describes how this <tt>UUID</tt> was generated.
    *
    * The version number has the following meaning:<p>
    * <ul>
    * <li>1    Time-based UUID
    * <li>2    DCE security UUID
    * <li>3    Name-based UUID
    * <li>4    Randomly generated UUID
    * </ul>
    *
    * @return  the version number of this <tt>UUID</tt>.
    **
    public function version()
        version = oconv(mostSigBits<2>, "mcdx")[5,1]
        return version
    end
    
    **
    * The variant number associated with this <tt>UUID</tt>. The variant 
    * number describes the layout of the <tt>UUID</tt>.
    *
    * The variant number has the following meaning:<p>
    * <ul>
    * <li>0    Reserved for NCS backward compatibility
    * <li>2 <a href="http://www.ietf.org/rfc/rfc4122.txt">IETF&nbsp;RFC&nbsp;4122</a>
    * (Leach-Salz), used by this class 
    * <li>6    Reserved, Microsoft Corporation backward compatibility
    * <li>7    Reserved for future definition
    * </ul>
    *
    * @return  the variant number of this <tt>UUID</tt>.
    **
    public function variant()
        lsb = leastSigBits<1>
        if (shift(lsb, 31) = 0) then
            variant = 0
        end else if (abs(shift(lsb, 30)) = 2) then
            variant = 2
        end else 
            variant = abs(shift(lsb, 29))
        end
        return variant
    end
    
    **
    * The timestamp value associated with this UUID.
    *
    * <p>The 60 bit timestamp value is constructed from the time_low,
    * time_mid, and time_hi fields of this <tt>UUID</tt>. The resulting 
    * timestamp is measured in 100-nanosecond units since midnight, 
    * October 15, 1582 UTC.<p>
    *
    * The timestamp value is only meaningful in a time-based UUID, which
    * has version type 1. If this <tt>UUID</tt> is not a time-based UUID then
    * this method throws UnsupportedOperationException.
    * 
    * @throws UnsupportedOperationException if this UUID is not a 
    *         version 1 UUID.
    **

    **
    * Returns a <code>String</code> object representing this
    * <code>UUID</code>.
    * 
    * <p>The UUID string representation is as described by this BNF : 
    * <blockquote><pre>
    * {@code
    * UUID                   = <time_low> "-" <time_mid> "-"
    *                          <time_high_and_version> "-"
    *                          <variant_and_sequence> "-"
    *                          <node>
    * time_low               = 4*<hexOctet>
    * time_mid               = 2*<hexOctet>
    * time_high_and_version  = 2*<hexOctet>
    * variant_and_sequence   = 2*<hexOctet>
    * node                   = 6*<hexOctet>
    * hexOctet               = <hexDigit><hexDigit>
    * hexDigit               =
    *       "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
    *       | "a" | "b" | "c" | "d" | "e" | "f"
    *       | "A" | "B" | "C" | "D" | "E" | "F"
    * }</pre></blockquote>
    *
    * @return  a string representation of this <tt>UUID</tt>.
    **
    public function toString()
        m1 = oconv(mostSigBits<1>, "mcdx")'r%8'
        m2 = oconv(mostSigBits<2>, "mcdx")'r%8'
        l1 = oconv(leastSigBits<1>, "mcdx")'r%8'
        l2 = oconv(leastSigBits<2>, "mcdx")'r%8'
        os = m1 : m2 : l1 : l2
        return fmt(os, 'l#8-#4-#4-#4-#12')
    end

end
